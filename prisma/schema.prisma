generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                   @id @default(cuid())
  email                       String                   @unique
  name                        String?
  org                         String?
  roles                       String[]                 @default([])
  createdAt                   DateTime                 @default(now())
  adminSettingsUpdates        AdminSettings[]
  campaigns                   Campaign[]               @relation("MakerCampaigns")
  campaignUpdates             CampaignUpdate[]
  comments                    Comment[]
  generatedImages             GeneratedImage[]
  githubConnections           GitHubConnection?
  githubInstallations         GitHubInstallation?
  organizationApprovals       Organization[]           @relation("OrganizationApprover")
  organizations               Organization[]
  organizationTeamMemberships OrganizationTeamMember[]
  otpCodes                    OtpCode[]
  passkeys                    Passkey[]
  pledges                     Pledge[]
  teamMemberships             TeamMember[]
  waitlistApprovals           Waitlist[]
}

model Campaign {
  id                   String           @id @default(cuid())
  makerId              String
  title                String
  summary              String
  description          String?
  currency             String           @default("USD")
  status               String           @default("draft")
  repoUrl              String?
  videoUrl             String?
  deployModes          String[]         @default([])
  createdAt            DateTime         @default(now())
  endsAt               DateTime?
  onlyBackersComment   Boolean          @default(false)
  requireBackerAccount Boolean          @default(true)
  updatedAt            DateTime         @default(now()) @updatedAt
  fundingGoalDollars   Int              @default(0)
  raisedDollars        Int              @default(0)
  organizationId       String?
  image                String?
  sectors              String[]         @default([])
  leadVideoUrl         String?
  websiteUrl           String?
  badges               Badge[]
  maker                User             @relation("MakerCampaigns", fields: [makerId], references: [id])
  organization         Organization?    @relation("OrganizationCampaigns", fields: [organizationId], references: [id])
  updates              CampaignUpdate[]
  comments             Comment[]
  license              License?
  milestones           Milestone[]
  pledges              Pledge[]
  pledgeTiers          PledgeTier[]
  stretchGoals         StretchGoal[]
  teamMembers          TeamMember[]
}

model Milestone {
  id         String    @id @default(cuid())
  campaignId String
  name       String
  pct        Int
  dueDate    DateTime?
  acceptance Json
  status     String    @default("pending")
  evidence   Json      @default("[]")
  createdAt  DateTime  @default(now())
  campaign   Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Pledge {
  id            String   @id @default(cuid())
  campaignId    String
  backerId      String
  status        String   @default("authorized")
  paymentRef    String?
  createdAt     DateTime @default(now())
  amountDollars Int
  backer        User     @relation(fields: [backerId], references: [id])
  campaign      Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Badge {
  id         String   @id @default(cuid())
  campaignId String
  code       String
  status     String
  evidence   Json
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model License {
  id         String   @id @default(cuid())
  campaignId String   @unique
  kind       String
  termsUrl   String?
  triggers   Json
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model StretchGoal {
  id            String   @id @default(cuid())
  campaignId    String
  title         String
  description   String
  isUnlocked    Boolean  @default(false)
  order         Int
  createdAt     DateTime @default(now())
  targetDollars Int      @default(0)
  campaign      Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model PledgeTier {
  id            String   @id @default(cuid())
  campaignId    String
  title         String
  description   String?
  amountDollars Int
  benefits      Json     @default("[]")
  isActive      Boolean  @default(true)
  order         Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  campaign      Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Comment {
  id           String    @id @default(cuid())
  campaignId   String
  userId       String
  content      String
  parentId     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isTeamMember Boolean   @default(false)
  campaign     Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  parent       Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Comment[] @relation("CommentReplies")
  user         User      @relation(fields: [userId], references: [id])
}

model TeamMember {
  id         String   @id @default(cuid())
  campaignId String
  userId     String
  role       String   @default("member")
  joinedAt   DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@unique([campaignId, userId])
}

model CampaignUpdate {
  id         String   @id @default(cuid())
  campaignId String
  authorId   String
  title      String
  content    String
  isPublic   Boolean  @default(true)
  emailSent  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model OtpCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, code])
}

model Passkey {
  id           String    @id @default(cuid())
  userId       String
  credentialId String    @unique
  publicKey    String
  counter      Int       @default(0)
  name         String?
  createdAt    DateTime  @default(now())
  lastUsed     DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AdminSettings {
  id                           String   @id @default(cuid())
  organizationApprovalRequired Boolean  @default(true)
  updatedAt                    DateTime @updatedAt
  updatedBy                    String?
  waitlistEnabled              Boolean  @default(false)
  updater                      User?    @relation(fields: [updatedBy], references: [id])
}

model Waitlist {
  id         String    @id @default(cuid())
  email      String    @unique
  reason     String
  status     String    @default("pending")
  notes      String?
  approvedAt DateTime?
  approvedBy String?
  createdAt  DateTime  @default(now())
  approver   User?     @relation(fields: [approvedBy], references: [id])
}

model Organization {
  id                  String                   @id @default(cuid())
  name                String
  description         String?
  website             String?
  email               String
  ownerId             String
  status              String                   @default("pending")
  stripeAccountId     String?                  @unique
  stripeAccountStatus String?
  businessType        String?
  taxId               String?
  address             Json?
  notes               String?
  approvedAt          DateTime?
  approvedBy          String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  listingVisibility   String                   @default("public")
  logo                String?
  portfolioItems      Json?
  shortDescription    String?
  type                String                   @default("creator")
  campaigns           Campaign[]               @relation("OrganizationCampaigns")
  generatedImages     GeneratedImage[]
  approver            User?                    @relation("OrganizationApprover", fields: [approvedBy], references: [id])
  owner               User                     @relation(fields: [ownerId], references: [id])
  services            OrganizationService[]
  teamMembers         OrganizationTeamMember[]
}

model ServiceCategory {
  id          String                @id @default(cuid())
  name        String                @unique
  slug        String                @unique
  description String?
  icon        String?
  order       Int                   @default(0)
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  services    OrganizationService[]
}

model OrganizationService {
  id             String          @id @default(cuid())
  organizationId String
  categoryId     String
  title          String
  description    String?
  deliverables   Json?
  pricing        Json?
  estimatedTime  String?
  prerequisites  Json?
  isActive       Boolean         @default(true)
  isFeatured     Boolean         @default(false)
  order          Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  category       ServiceCategory @relation(fields: [categoryId], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, categoryId])
}

model OrganizationTeamMember {
  id                String       @id @default(cuid())
  organizationId    String
  userId            String
  role              String
  title             String?
  bio               String?
  headshot          String?
  linkedinUrl       String?
  githubUrl         String?
  portfolioUrl      String?
  specialties       Json?
  isPubliclyVisible Boolean      @default(true)
  order             Int          @default(0)
  joinedAt          DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

model GeneratedImage {
  id             String        @id @default(cuid())
  organizationId String?
  userId         String
  filename       String
  blobUrl        String
  blobKey        String
  width          Int?
  height         Int?
  fileSize       Int?
  mimeType       String        @default("image/png")
  prompt         String
  model          String        @default("dall-e-3")
  theme          String?
  tags           String[]      @default([])
  campaignTitle  String?
  usageCount     Int           @default(1)
  isPublic       Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([theme])
  @@index([tags])
}

model GitHubConnection {
  id          String   @id @default(cuid())
  userId      String   @unique
  githubToken String
  username    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GitHubInstallation {
  id             String   @id @default(cuid())
  userId         String   @unique
  installationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([installationId])
}
