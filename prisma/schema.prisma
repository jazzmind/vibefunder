generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(cuid())
  email     String       @unique
  name      String?
  org       String?
  roles     String[]     @default([])
  createdAt DateTime     @default(now())
  campaigns Campaign[]   @relation("MakerCampaigns")
  pledges   Pledge[]
  comments  Comment[]
  otpCodes  OtpCode[]
  passkeys  Passkey[]
  teamMemberships TeamMember[]
  campaignUpdates CampaignUpdate[]
  adminSettingsUpdates AdminSettings[]
  waitlistApprovals Waitlist[]
  organizations Organization[]
  organizationApprovals Organization[] @relation("OrganizationApprover")
  organizationTeamMemberships OrganizationTeamMember[]
}

model Campaign {
  id              String        @id @default(cuid())
  makerId         String
  maker           User          @relation("MakerCampaigns", fields: [makerId], references: [id], onDelete: Restrict)
  organizationId  String?
  organization    Organization? @relation("OrganizationCampaigns", fields: [organizationId], references: [id], onDelete: SetNull)
  title           String
  summary         String
  description     String?
  budgetDollars     Int @default(0) // in dollars 
  fundingGoalDollars Int  @default(0) 
  raisedDollars     Int           @default(0)
  currency        String        @default("USD")
  status          String        @default("draft")
  repoUrl         String?
  videoUrl        String?
  image           String?
  leadVideoUrl    String?
  deployModes     String[]      @default([])
  sectors         String[]      @default([])
  requireBackerAccount Boolean   @default(true)
  onlyBackersComment Boolean     @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  endsAt          DateTime?
  milestones      Milestone[]
  pledges         Pledge[]
  badges          Badge[]
  license         License?
  stretchGoals    StretchGoal[]
  pledgeTiers     PledgeTier[]
  comments        Comment[]
  teamMembers     TeamMember[]
  updates         CampaignUpdate[]
}

model Milestone {
  id            String   @id @default(cuid())
  campaignId    String
  campaign      Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  name          String
  pct           Int
  dueDate       DateTime?
  acceptance    Json
  status        String   @default("pending")
  evidence      Json     @default("[]")
  createdAt     DateTime @default(now())
}

model Pledge {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  backerId    String
  backer      User     @relation(fields: [backerId], references: [id], onDelete: Restrict)
  amountDollars Int
  status      String   @default("authorized")
  paymentRef  String?
  createdAt   DateTime @default(now())
}

model Badge {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  code       String
  status     String
  evidence   Json
}

model License {
  id          String   @id @default(cuid())
  campaignId  String   @unique
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  kind        String
  termsUrl    String?
  triggers    Json
}

model StretchGoal {
  id              String   @id @default(cuid())
  campaignId      String
  campaign        Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  title           String
  description     String
  targetDollars   Int @default(0) // in dollars 
  isUnlocked      Boolean  @default(false)
  order           Int
  createdAt       DateTime @default(now())
}

model PledgeTier {
  id              String   @id @default(cuid())
  campaignId      String
  campaign        Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  amountDollars   Int      // in dollars
  benefits        Json     @default("[]") // Array of benefits/perks
  isActive        Boolean  @default(true)
  order           Int      @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Comment {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  content    String
  parentId   String?
  parent     Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("CommentReplies")
  isTeamMember Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TeamMember {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  role       String   @default("member") // "owner", "admin", "member"
  joinedAt   DateTime @default(now())

  @@unique([campaignId, userId])
}

model CampaignUpdate {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Restrict)
  title      String
  content    String
  isPublic   Boolean  @default(true)
  emailSent  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model OtpCode {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, code])
}

model Passkey {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialId  String   @unique
  publicKey     String
  counter       Int      @default(0)
  name          String?
  createdAt     DateTime @default(now())
  lastUsed      DateTime?

  @@index([userId])
}

model AdminSettings {
  id                      String   @id @default(cuid())
  waitlistEnabled         Boolean  @default(false)
  organizationApprovalRequired Boolean @default(true)
  updatedAt               DateTime @updatedAt
  updatedBy               String?
  updater                 User?    @relation(fields: [updatedBy], references: [id], onDelete: SetNull)
}

model Waitlist {
  id            String   @id @default(cuid())
  email         String   @unique
  reason        String   // "back_campaign", "create_campaign", or "provide_services"
  status        String   @default("pending") // "pending", "approved", "rejected"
  notes         String?  // Admin notes
  approvedAt    DateTime?
  approvedBy    String?
  approver      User?    @relation(fields: [approvedBy], references: [id], onDelete: SetNull)
  createdAt     DateTime @default(now())
}

model Organization {
  id                String    @id @default(cuid())
  name              String
  description       String?
  website           String?
  email             String
  ownerId           String
  owner             User      @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  type              String    @default("creator") // "creator", "service_provider"
  status            String    @default("pending") // "pending", "approved", "rejected"
  stripeAccountId   String?   @unique
  stripeAccountStatus String? // "pending", "active", "restricted"
  businessType      String?   // "individual", "company", "non_profit"
  taxId             String?
  address           Json?     // Address information
  notes             String?   // Admin notes
  approvedAt        DateTime?
  approvedBy        String?
  approver          User?     @relation("OrganizationApprover", fields: [approvedBy], references: [id], onDelete: SetNull)
  
  // Service Provider specific fields
  listingVisibility String    @default("public") // "public", "creators_only", "limited"
  shortDescription  String?   // Brief tagline for marketplace listings
  logo              String?   // Organization logo URL
  portfolioItems    Json?     // Array of portfolio/case study items
  
  // Relationships
  campaigns         Campaign[] @relation("OrganizationCampaigns")
  services          OrganizationService[]
  teamMembers       OrganizationTeamMember[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ServiceCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?  // Icon name or emoji
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  services    OrganizationService[]
  createdAt   DateTime @default(now())
}

model OrganizationService {
  id             String          @id @default(cuid())
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  categoryId     String
  category       ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  
  // Service details
  title          String
  description    String?
  deliverables   Json?    // Array of what's delivered
  pricing        Json?    // Pricing structure (hourly, project, retainer)
  estimatedTime  String?  // "1-2 weeks", "2-4 months", etc.
  prerequisites  Json?    // Array of requirements from client
  
  // Display options
  isActive       Boolean  @default(true)
  isFeatured     Boolean  @default(false)
  order          Int      @default(0)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([organizationId, categoryId])
}

model OrganizationTeamMember {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Team member details
  role           String       // "owner", "admin", "member", "lead", etc.
  title          String?      // Job title/position
  bio            String?      // Professional bio
  headshot       String?      // Profile photo URL
  linkedinUrl    String?
  githubUrl      String?
  portfolioUrl   String?
  specialties    Json?        // Array of skill areas
  
  // Display options
  isPubliclyVisible Boolean   @default(true)
  order          Int          @default(0)
  
  joinedAt       DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([organizationId, userId])
}
